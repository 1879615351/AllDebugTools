// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<MqttClient>>
@sealed
class MqttClient extends RustOpaque {
  MqttClient.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MqttClient.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MqttClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MqttClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MqttClientPtr,
  );

  Stream<String> beginReceive({dynamic hint}) =>
      RustLib.instance.api.mqttClientBeginReceive(
        that: this,
      );

  Future<void> connect(
          {required String id,
          required String host,
          required int port,
          dynamic hint}) =>
      RustLib.instance.api.mqttClientConnect(
        that: this,
        id: id,
        host: host,
        port: port,
      );

  Future<void> disconnect({dynamic hint}) =>
      RustLib.instance.api.mqttClientDisconnect(
        that: this,
      );

  Future<void> exit({dynamic hint}) => RustLib.instance.api.mqttClientExit(
        that: this,
      );

  factory MqttClient({dynamic hint}) =>
      RustLib.instance.api.mqttClientNew(hint: hint);

  Future<void> publish(
          {required String topic,
          required QosNative qos,
          required bool retain,
          required String payload,
          dynamic hint}) =>
      RustLib.instance.api.mqttClientPublish(
        that: this,
        topic: topic,
        qos: qos,
        retain: retain,
        payload: payload,
      );

  Stream<String> stateMonitor({dynamic hint}) =>
      RustLib.instance.api.mqttClientStateMonitor(
        that: this,
      );

  Future<void> subscribe(
          {required String topic, required QosNative qos, dynamic hint}) =>
      RustLib.instance.api.mqttClientSubscribe(
        that: this,
        topic: topic,
        qos: qos,
      );

  Future<void> unsubscribe({required String topic, dynamic hint}) =>
      RustLib.instance.api.mqttClientUnsubscribe(
        that: this,
        topic: topic,
      );
}

enum QosNative {
  atLeastOnce,
  atMostOnce,
  exactlyOnce,
}
